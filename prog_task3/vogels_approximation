import numpy as np

def vogels_approximation_method(cost_matrix, supply, demand):
    num_suppliers = len(supply)
    num_consumers = len(demand)

    # Check if the method is applicable
    if num_suppliers + num_consumers - 1 != np.sum(cost_matrix > 0):
        return "The method is not applicable!"

    # Check if the problem is balanced
    if np.sum(supply) != np.sum(demand):
        return "The problem is not balanced!"

    # Initialize the solution matrix and assign values to u and v
    solution = np.zeros((num_suppliers, num_consumers))
    u = np.zeros(num_suppliers)
    v = np.zeros(num_consumers)

    while np.sum(supply) > 0 and np.sum(demand) > 0:
        # Calculate the penalty matrix
        penalty_matrix = np.zeros((num_suppliers, num_consumers))
        for i in range(num_suppliers):
            for j in range(num_consumers):
                if solution[i, j] == 0:
                    penalty_matrix[i, j] = cost_matrix[i, j] - min(cost_matrix[i, :]) - min(cost_matrix[:, j])

        # Find the cell with the maximum penalty
        max_penalty_cell = np.unravel_index(np.argmax(penalty_matrix), penalty_matrix.shape)
        i, j = max_penalty_cell

        # Find the minimum of supply and demand for the selected cell
        min_supply_demand = min(supply[i], demand[j])

        # Assign the minimum value to the selected cell and update supply and demand
        solution[i, j] = min_supply_demand
        supply[i] -= min_supply_demand
        demand[j] -= min_supply_demand

        # Update u and v values
        if supply[i] == 0:
            u[i] = cost_matrix[i, j] - v[j]
        elif demand[j] == 0:
            v[j] = cost_matrix[i, j] - u[i]

    return solution

def print_table(supply, demand, costs):
    print("Costs:")
    print(costs, "\n")
    print("Supply:")
    print(supply, "\n")
    print("Demand:")
    print(demand, "\n")

# Example usage
supply = np.array([20, 30, 50])
demand = np.array([30, 40, 30, 20])
cost_matrix = np.array([[6, 8, 10, 9],
                       [7, 9, 4, 11],
                       [4, 7, 6, 8]])

# Check applicability and balance
result = vogels_approximation_method(cost_matrix, supply, demand)
if isinstance(result, str):
    print(result)
else:
    print_table(supply, demand, cost_matrix)
    print("Initial Basic Feasible Solution:")
    print(result)
